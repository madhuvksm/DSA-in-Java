Given a number n, determine whether it is a prime number or not. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.

Examples :

Input: n = 7
Output: true
Explanation: 7 has exactly two divisors: 1 and 7, making it a prime number.

Solution 1: Brute Force

class Solution {
    static boolean isPrime(int n) {
        // code here
        
        if(n <=1){
            return false; //Special case
        }
	
        if(n==2){
		return true; //Special case one and only even and prime number;
	  }
        
        for(int i=3; i<n; i++){
            if(n%i == 0){
                return false;
            }
        }
        
        return true;
    }
}

T.C: O(n) checked every number from 3 to n-1.

Solution 2: Optimized We are checking till Square root of n

class Solution {
    static boolean isPrime(int n) {
        // code here
        
        if(n <= 1){
            return false;// 1 is not a prime number
        }
        
        if(n == 2){
            return true;// 2 is the only even prime number
        }
        
	  // If the number is even and greater than 2, it's not prime
        if(n%2 ==0){
            return false; // Even numbers > 2 are not prime
        }
        
	  // Check odd numbers from 3 to sqrt(n) with increment of 2 

        for(int i=3; i*i<=n; i+=2){
            if(n%i == 0){
                return false; // n is divisible by i, so it's not prime
            }
        }
        
        return true;
    }
}

T.C : O(sqrt(n)), which is much faster because we only check up to the square root of n and we skip even numbers (other than 2)